/**
 * @swagger
 * components:
 *   schemas:
 *     Account:
 *       properties:
 *         id:
 *           type: integer
 *           description: This id will automatically generated by the database (MySql)
 *         first_name:
 *           type: string
 *         last_name:
 *           type: string
 *         email:
 *           type: string
 *         phone_number:
 *           type: integer
 *         password:
 *           type: string
 *         date_of_birth:
 *           type: string   
 *           format: date
 *         is_active:
 *            type: boolean
 *            default: true
 *         is_superuser:
 *            type: boolean
 *            default: false
 *            description: for the super admin
 *         is_staff:
 *            type: boolean
 *            default: false
 *            description: for teachers
 *         created_at:
 *            type: string
 *            description: Date and time when the account was created
 *         updated_at:
 *            type: string
 *            description: Date and time when the account was updated
 *
 *       required:
 *         - first_name
 *         - email
 *         - password
 *     Permission:
 *          properties:
 *              id:
 *                  type: integer
 *                  description: This id will automatically generated by the database (MySql)
 *              name:
 *                  type: string
 *                  description: This field is for human readable text for understanding for each permission
 *              codename:
 *                  type: string
 *                  description: This field is for setting the permission code
 */
/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: User login for teachers, superadmins, etc.
 *     tags: [Auth]
 *     description: Endpoint for user login.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *             required:
 *               - email
 *               - password
 *     responses:
 *       200:
 *         description: User login successful
 *       400:
 *         description: Invalid login credentials
 *       404:
 *         description: User not found
 */
/**
 * @swagger
 * /api/auth/permissions:
 *  get:
 *   summary: Permission List
 *   tags: [Permissions]
 *   description: This api will allows you to list all the permissions
 *   responses:
 *      200:
 *         description: Permission Listed Successfully
 *      500:
 *         description: Cannot List Permissions. Database Level Error
 */
/**
 * @swagger
 * /api/auth/permissions:
 *   post:
 *      summary: Permission Create
 *      tags: [Permissions]
 *      description: This is api is used to create permissions
 *      requestBody:
 *          required: True
 *          content:
 *              application/json:
 *                  schema:
 *                   type: object
 *                   properties:
 *                       name:
 *                           type: string
 *                       codename:
 *                           type: string
 *      responses:
 *          201:
 *              description:  Permission Created Successfully
 *          500:
 *              description: Cannot Create Permission
 */

/**
 * @swagger
 * /api/auth/permissions/{id}:
 *   get:
 *      summary: Permission View
 *      tags: [Permissions]
 *      parameters:
 *        - in: path
 *          name: id
 *          required: true
 *          schema:
 *            type: integer
 *          description: Id of the permission
 *      responses:
 *          200:
 *              description: Permission Fetch Successfully
 *          500:
 *              description: Permission Cannot Fetch.
 */
/**
 * @swagger
 * /api/auth/permissions/{id}:
 *   put:
 *      summary: Permission View
 *      tags: [Permissions]
 *      parameters:
 *        - in: path
 *          name: id
 *          required: true
 *          schema:
 *            type: integer
 *          description: Id of the permission
 *      requestBody:
 *          content:
 *              application/json:
 *                  schema:
 *                      type: object
 *                      properties:
 *                          name:
 *                              type: string
 *                          codename:
 *                              type: string
 *      responses:
 *          200:
 *              description: Permission Updated Successfully
 *          500:
 *              description: Permission Cannot Fetch.
 */
/**
 * @swagger
 * /api/auth/permissions/{id}:
 *   delete:
 *      summary: Permission View
 *      tags: [Permissions]
 *      parameters:
 *        - in: path
 *          name: id
 *          required: true
 *          schema:
 *            type: integer
 *          description: Id of the permission
 *      responses:
 *          200:
 *              description: Permission Deleted Successfully
 *          500:
 *              description: Permission Cannot Fetch.
 */
